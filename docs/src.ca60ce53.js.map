{"version":3,"sources":["ui.ts","../node_modules/chess.js/chess.js","board.ts","renderer.ts","index.ts"],"names":[],"mappings":"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AA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,EAAA,CACA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EACA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EACA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,GAAA,GAAA,EA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","file":"src.ca60ce53.js","sourceRoot":"../src","sourcesContent":["class TextManager {\n    private textarea: HTMLTextAreaElement\n\n    constructor() {\n        this.textarea = document.getElementById(\n            \"textarea\"\n        ) as HTMLTextAreaElement\n    }\n\n    get text() {\n        return this.textarea.value\n    }\n\n    set text(newText: string) {\n        this.textarea.value = newText\n    }\n\n    clear() {\n        this.text = \"\"\n    }\n}\n\ninterface HTMLInputEvent extends Event {\n    target: HTMLInputElement & EventTarget\n}\n\nclass FileManager {\n    constructor(callback: (text: string) => void) {\n        const filePicker = document.getElementById(\n            \"file-input\"\n        ) as HTMLInputElement\n        filePicker.onchange = (event: HTMLInputEvent) => {\n            this.handleFile(event.target.files[0], callback)\n            event.target.value = \"\"\n        }\n\n        const textarea = document.getElementById(\n            \"textarea\"\n        ) as HTMLTextAreaElement\n        textarea.ondrop = (event: Event & { dataTransfer: DataTransfer }) => {\n            event.preventDefault()\n            const file = event.dataTransfer.files[0]\n            this.handleFile(file, callback)\n        }\n    }\n\n    handleFile(file: File, callback: (text: string) => void) {\n        const reader = new FileReader()\n        reader.onload = event => callback(event.target.result.toString())\n        reader.readAsText(file)\n    }\n}\n\ntype cb = () => void\n\nclass ButtonManager {\n    constructor(start: cb, undo: cb, redo: cb, end: cb) {\n        document.getElementById(\"start\").onclick = start\n        document.getElementById(\"undo\").onclick = undo\n        document.getElementById(\"redo\").onclick = redo\n        document.getElementById(\"end\").onclick = end\n    }\n}\n\nclass CommentManager {\n    private comment: HTMLParagraphElement\n\n    constructor() {\n        this.comment = document.getElementById(\n            \"comment\"\n        ) as HTMLParagraphElement\n    }\n\n    set text(newText: string) {\n        this.comment.innerText = newText\n    }\n}\n\nexport { TextManager, FileManager, ButtonManager, CommentManager }\n","/*\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/* minified license below  */\n\n/* @license\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\n * Released under the BSD license\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\n */\n\nvar Chess = function(fen) {\n\n  /* jshint indent: false */\n\n  var BLACK = 'b';\n  var WHITE = 'w';\n\n  var EMPTY = -1;\n\n  var PAWN = 'p';\n  var KNIGHT = 'n';\n  var BISHOP = 'b';\n  var ROOK = 'r';\n  var QUEEN = 'q';\n  var KING = 'k';\n\n  var SYMBOLS = 'pnbrqkPNBRQK';\n\n  var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\n  var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15]\n  };\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14,  18, 33, 31,  14],\n    b: [-17, -15,  17,  15],\n    r: [-16,   1,  16,  -1],\n    q: [-17, -16, -15,   1,  17, 16, 15,  -1],\n    k: [-17, -16, -15,   1,  17, 16, 15,  -1]\n  };\n\n  var ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n  ];\n\n  var RAYS = [\n     17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n      0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n      0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n      0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n      0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n      1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n      0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n      0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n      0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n      0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n    -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n  ];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\n\n  var FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q'\n  };\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64\n  };\n\n  var RANK_1 = 7;\n  var RANK_2 = 6;\n  var RANK_3 = 5;\n  var RANK_4 = 4;\n  var RANK_5 = 3;\n  var RANK_6 = 2;\n  var RANK_7 = 1;\n  var RANK_8 = 0;\n\n  var SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n  var ROOKS = {\n    w: [{square: SQUARES.a1, flag: BITS.QSIDE_CASTLE},\n        {square: SQUARES.h1, flag: BITS.KSIDE_CASTLE}],\n    b: [{square: SQUARES.a8, flag: BITS.QSIDE_CASTLE},\n        {square: SQUARES.h8, flag: BITS.KSIDE_CASTLE}]\n  };\n\n  var board = new Array(128);\n  var kings = {w: EMPTY, b: EMPTY};\n  var turn = WHITE;\n  var castling = {w: 0, b: 0};\n  var ep_square = EMPTY;\n  var half_moves = 0;\n  var move_number = 1;\n  var history = [];\n  var header = {};\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION);\n  } else {\n    load(fen);\n  }\n\n  function clear() {\n    board = new Array(128);\n    kings = {w: EMPTY, b: EMPTY};\n    turn = WHITE;\n    castling = {w: 0, b: 0};\n    ep_square = EMPTY;\n    half_moves = 0;\n    move_number = 1;\n    history = [];\n    header = {};\n    update_setup(generate_fen());\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION);\n  }\n\n  function load(fen) {\n    var tokens = fen.split(/\\s+/);\n    var position = tokens[0];\n    var square = 0;\n\n    if (!validate_fen(fen).valid) {\n      return false;\n    }\n\n    clear();\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i);\n\n      if (piece === '/') {\n        square += 8;\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        var color = (piece < 'a') ? WHITE : BLACK;\n        put({type: piece.toLowerCase(), color: color}, algebraic(square));\n        square++;\n      }\n    }\n\n    turn = tokens[1];\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE;\n    }\n\n    ep_square = (tokens[3] === '-') ? EMPTY : SQUARES[tokens[3]];\n    half_moves = parseInt(tokens[4], 10);\n    move_number = parseInt(tokens[5], 10);\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n       0: 'No errors.',\n       1: 'FEN string must contain six space-delimited fields.',\n       2: '6th field (move number) must be a positive integer.',\n       3: '5th field (half move counter) must be a non-negative integer.',\n       4: '4th field (en-passant square) is invalid.',\n       5: '3rd field (castling availability) is invalid.',\n       6: '2nd field (side to move) is invalid.',\n       7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\n       8: '1st field (piece positions) is invalid [consecutive numbers].',\n       9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square',\n    };\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n      return {valid: false, error_number: 1, error: errors[1]};\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || (parseInt(tokens[5], 10) <= 0)) {\n      return {valid: false, error_number: 2, error: errors[2]};\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || (parseInt(tokens[4], 10) < 0)) {\n      return {valid: false, error_number: 3, error: errors[3]};\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return {valid: false, error_number: 4, error: errors[4]};\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if( !/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return {valid: false, error_number: 5, error: errors[5]};\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return {valid: false, error_number: 6, error: errors[6]};\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n      return {valid: false, error_number: 7, error: errors[7]};\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0;\n      var previous_was_number = false;\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return {valid: false, error_number: 8, error: errors[8]};\n          }\n          sum_fields += parseInt(rows[i][k], 10);\n          previous_was_number = true;\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return {valid: false, error_number: 9, error: errors[9]};\n          }\n          sum_fields += 1;\n          previous_was_number = false;\n        }\n      }\n      if (sum_fields !== 8) {\n        return {valid: false, error_number: 10, error: errors[10]};\n      }\n    }\n\n    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\n        (tokens[3][1] == '6' && tokens[1] == 'b')) {\n          return {valid: false, error_number: 11, error: errors[11]};\n    }\n\n    /* everything's okay! */\n    return {valid: true, error_number: 0, error: errors[0]};\n  }\n\n  function generate_fen() {\n    var empty = 0;\n    var fen = '';\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (board[i] == null) {\n        empty++;\n      } else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        var color = board[i].color;\n        var piece = board[i].type;\n\n        fen += (color === WHITE) ?\n                 piece.toUpperCase() : piece.toLowerCase();\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += '/';\n        }\n\n        empty = 0;\n        i += 8;\n      }\n    }\n\n    var cflags = '';\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) { cflags += 'K'; }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) { cflags += 'Q'; }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) { cflags += 'k'; }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) { cflags += 'q'; }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-';\n    var epflags = (ep_square === EMPTY) ? '-' : algebraic(ep_square);\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ');\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' &&\n          typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1];\n      }\n    }\n    return header;\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return;\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1';\n      header['FEN'] = fen;\n    } else {\n      delete header['SetUp'];\n      delete header['FEN'];\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARES[square]];\n    return (piece) ? {type: piece.type, color: piece.color} : null;\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false;\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false;\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false;\n    }\n\n    var sq = SQUARES[square];\n\n    /* don't let the user place more than one king */\n    if (piece.type == KING &&\n        !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\n      return false;\n    }\n\n    board[sq] = {type: piece.type, color: piece.color};\n    if (piece.type === KING) {\n      kings[piece.color] = sq;\n    }\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  function remove(square) {\n    var piece = get(square);\n    board[SQUARES[square]] = null;\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY;\n    }\n\n    update_setup(generate_fen());\n\n    return piece;\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type\n    };\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION;\n      move.promotion = promotion;\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type;\n    } else if (flags & BITS.EP_CAPTURE) {\n        move.captured = PAWN;\n    }\n    return move;\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (board[from].type === PAWN &&\n         (rank(to) === RANK_8 || rank(to) === RANK_1)) {\n          var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\n          for (var i = 0, len = pieces.length; i < len; i++) {\n            moves.push(build_move(board, from, to, flags, pieces[i]));\n          }\n      } else {\n       moves.push(build_move(board, from, to, flags));\n      }\n    }\n\n    var moves = [];\n    var us = turn;\n    var them = swap_color(us);\n    var second_rank = {b: RANK_7, w: RANK_2};\n\n    var first_sq = SQUARES.a8;\n    var last_sq = SQUARES.h1;\n    var single_square = false;\n\n    /* do we want legal moves? */\n    var legal = (typeof options !== 'undefined' && 'legal' in options) ?\n                options.legal : true;\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square];\n        single_square = true;\n      } else {\n        /* invalid square */\n        return [];\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) { i += 7; continue; }\n\n      var piece = board[i];\n      if (piece == null || piece.color !== us) {\n        continue;\n      }\n\n      if (piece.type === PAWN) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0];\n        if (board[square] == null) {\n            add_move(board, moves, i, square, BITS.NORMAL);\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1];\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN);\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j];\n          if (square & 0x88) continue;\n\n          if (board[square] != null &&\n              board[square].color === them) {\n              add_move(board, moves, i, square, BITS.CAPTURE);\n          } else if (square === ep_square) {\n              add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);\n          }\n        }\n      } else {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j];\n          var square = i;\n\n          while (true) {\n            square += offset;\n            if (square & 0x88) break;\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL);\n            } else {\n              if (board[square].color === us) break;\n              add_move(board, moves, i, square, BITS.CAPTURE);\n              break;\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break;\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if ((!single_square) || last_sq === kings[us]) {\n      /* king-side castling */\n      if (castling[us] & BITS.KSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from + 2;\n\n        if (board[castling_from + 1] == null &&\n            board[castling_to]       == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from + 1) &&\n            !attacked(them, castling_to)) {\n          add_move(board, moves, kings[us] , castling_to,\n                   BITS.KSIDE_CASTLE);\n        }\n      }\n\n      /* queen-side castling */\n      if (castling[us] & BITS.QSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from - 2;\n\n        if (board[castling_from - 1] == null &&\n            board[castling_from - 2] == null &&\n            board[castling_from - 3] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from - 1) &&\n            !attacked(them, castling_to)) {\n          add_move(board, moves, kings[us], castling_to,\n                   BITS.QSIDE_CASTLE);\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves;\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = [];\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i]);\n      }\n      undo_move();\n    }\n\n    return legal_moves;\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, sloppy) {\n\n    var output = '';\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else {\n      var disambiguator = get_disambiguator(move, sloppy);\n\n      if (move.piece !== PAWN) {\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n\n      output += algebraic(move.to);\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n\n    make_move(move);\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    undo_move();\n\n    return output;\n  }\n\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/,'').replace(/[+#]?[?!]*$/,'');\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) { i += 7; continue; }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue;\n\n      var piece = board[i];\n      var difference = i - square;\n      var index = difference + 119;\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true;\n          } else {\n            if (piece.color === BLACK) return true;\n          }\n          continue;\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true;\n\n        var offset = RAYS[index];\n        var j = i + offset;\n\n        var blocked = false;\n        while (j !== square) {\n          if (board[j] != null) { blocked = true; break; }\n          j += offset;\n        }\n\n        if (!blocked) return true;\n      }\n    }\n\n    return false;\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color]);\n  }\n\n  function in_check() {\n    return king_attacked(turn);\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0;\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0;\n  }\n\n  function insufficient_material() {\n    var pieces = {};\n    var bishops = [];\n    var num_pieces = 0;\n    var sq_color = 0;\n\n    for (var i = SQUARES.a8; i<= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2;\n      if (i & 0x88) { i += 7; continue; }\n\n      var piece = board[i];\n      if (piece) {\n        pieces[piece.type] = (piece.type in pieces) ?\n                              pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color);\n        }\n        num_pieces++;\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) { return true; }\n\n    /* k vs. kn .... or .... k vs. kb */\n    else if (num_pieces === 3 && (pieces[BISHOP] === 1 ||\n                                 pieces[KNIGHT] === 1)) { return true; }\n\n    /* kb vs. kb where any number of bishops are all on the same color */\n    else if (num_pieces === pieces[BISHOP] + 2) {\n      var sum = 0;\n      var len = bishops.length;\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) { return true; }\n    }\n\n    return false;\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = [];\n    var positions = {};\n    var repetition = false;\n\n    while (true) {\n      var move = undo_move();\n      if (!move) break;\n      moves.push(move);\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0,4).join(' ');\n\n      /* has the position occurred three or move times */\n      positions[fen] = (fen in positions) ? positions[fen] + 1 : 1;\n      if (positions[fen] >= 3) {\n        repetition = true;\n      }\n\n      if (!moves.length) {\n        break;\n      }\n      make_move(moves.pop());\n    }\n\n    return repetition;\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: {b: kings.b, w: kings.w},\n      turn: turn,\n      castling: {b: castling.b, w: castling.w},\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number\n    });\n  }\n\n  function make_move(move) {\n    var us = turn;\n    var them = swap_color(us);\n    push(move);\n\n    board[move.to] = board[move.from];\n    board[move.from] = null;\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null;\n      } else {\n        board[move.to + 16] = null;\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = {type: move.promotion, color: us};\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to;\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1;\n        var castling_from = move.to + 1;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1;\n        var castling_from = move.to - 2;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      }\n\n      /* turn off castling */\n      castling[us] = '';\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square &&\n            castling[us] & ROOKS[us][i].flag) {\n          castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square &&\n            castling[them] & ROOKS[them][i].flag) {\n          castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16;\n      } else {\n        ep_square = move.to + 16;\n      }\n    } else {\n      ep_square = EMPTY;\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0;\n    } else {\n      half_moves++;\n    }\n\n    if (turn === BLACK) {\n      move_number++;\n    }\n    turn = swap_color(turn);\n  }\n\n  function undo_move() {\n    var old = history.pop();\n    if (old == null) { return null; }\n\n    var move = old.move;\n    kings = old.kings;\n    turn = old.turn;\n    castling = old.castling;\n    ep_square = old.ep_square;\n    half_moves = old.half_moves;\n    move_number = old.move_number;\n\n    var us = turn;\n    var them = swap_color(turn);\n\n    board[move.from] = board[move.to];\n    board[move.from].type = move.piece;  // to undo any promotions\n    board[move.to] = null;\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = {type: move.captured, color: them};\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index;\n      if (us === BLACK) {\n        index = move.to - 16;\n      } else {\n        index = move.to + 16;\n      }\n      board[index] = {type: PAWN, color: them};\n    }\n\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1;\n        castling_from = move.to - 1;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2;\n        castling_from = move.to + 1;\n      }\n\n      board[castling_to] = board[castling_from];\n      board[castling_from] = null;\n    }\n\n    return move;\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, sloppy) {\n    var moves = generate_moves({legal: !sloppy});\n\n    var from = move.from;\n    var to = move.to;\n    var piece = move.piece;\n\n    var ambiguities = 0;\n    var same_rank = 0;\n    var same_file = 0;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from;\n      var ambig_to = moves[i].to;\n      var ambig_piece = moves[i].piece;\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++;\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++;\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++;\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from);\n      }\n      /* if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      else if (same_file > 0) {\n        return algebraic(from).charAt(1);\n      }\n      /* else use the file symbol */\n      else {\n        return algebraic(from).charAt(0);\n      }\n    }\n\n    return '';\n  }\n\n  function ascii() {\n    var s = '   +------------------------+\\n';\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |';\n      }\n\n      /* empty piece */\n      if (board[i] == null) {\n        s += ' . ';\n      } else {\n        var piece = board[i].type;\n        var color = board[i].color;\n        var symbol = (color === WHITE) ?\n                     piece.toUpperCase() : piece.toLowerCase();\n        s += ' ' + symbol + ' ';\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n';\n        i += 8;\n      }\n    }\n    s += '   +------------------------+\\n';\n    s += '     a  b  c  d  e  f  g  h\\n';\n\n    return s;\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move);\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n      if (matches) {\n        var piece = matches[1];\n        var from = matches[2];\n        var to = matches[3];\n        var promotion = matches[4];\n      }\n    }\n\n    var moves = generate_moves();\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if ((clean_move === stripped_san(move_to_san(moves[i]))) ||\n          (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))) {\n        return moves[i];\n      } else {\n        if (matches &&\n            (!piece || piece.toLowerCase() == moves[i].piece) &&\n            SQUARES[from] == moves[i].from &&\n            SQUARES[to] == moves[i].to &&\n            (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n          return moves[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4;\n  }\n\n  function file(i) {\n    return i & 15;\n  }\n\n  function algebraic(i){\n    var f = file(i), r = rank(i);\n    return 'abcdefgh'.substring(f,f+1) + '87654321'.substring(r,r+1);\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE;\n  }\n\n  function is_digit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move);\n    move.san = move_to_san(move, false);\n    move.to = algebraic(move.to);\n    move.from = algebraic(move.from);\n\n    var flags = '';\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag];\n      }\n    }\n    move.flags = flags;\n\n    return move;\n  }\n\n  function clone(obj) {\n    var dupe = (obj instanceof Array) ? [] : {};\n\n    for (var property in obj) {\n      if (typeof property === 'object') {\n        dupe[property] = clone(obj[property]);\n      } else {\n        dupe[property] = obj[property];\n      }\n    }\n\n    return dupe;\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({legal: false});\n    var nodes = 0;\n    var color = turn;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1);\n          nodes += child_nodes;\n        } else {\n          nodes++;\n        }\n      }\n      undo_move();\n    }\n\n    return nodes;\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    SQUARES: (function() {\n                /* from the ECMA-262 spec (section 12.6.4):\n                 * \"The mechanics of enumerating the properties ... is\n                 * implementation dependent\"\n                 * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n                 * ordered correctly\n                 */\n                var keys = [];\n                for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n                  if (i & 0x88) { i += 7; continue; }\n                  keys.push(algebraic(i));\n                }\n                return keys;\n              })(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function(fen) {\n      return load(fen);\n    },\n\n    reset: function() {\n      return reset();\n    },\n\n    moves: function(options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options);\n      var moves = [];\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (typeof options !== 'undefined' && 'verbose' in options &&\n            options.verbose) {\n          moves.push(make_pretty(ugly_moves[i]));\n        } else {\n          moves.push(move_to_san(ugly_moves[i], false));\n        }\n      }\n\n      return moves;\n    },\n\n    in_check: function() {\n      return in_check();\n    },\n\n    in_checkmate: function() {\n      return in_checkmate();\n    },\n\n    in_stalemate: function() {\n      return in_stalemate();\n    },\n\n    in_draw: function() {\n      return half_moves >= 100 ||\n             in_stalemate() ||\n             insufficient_material() ||\n             in_threefold_repetition();\n    },\n\n    insufficient_material: function() {\n      return insufficient_material();\n    },\n\n    in_threefold_repetition: function() {\n      return in_threefold_repetition();\n    },\n\n    game_over: function() {\n      return half_moves >= 100 ||\n             in_checkmate() ||\n             in_stalemate() ||\n             insufficient_material() ||\n             in_threefold_repetition();\n    },\n\n    validate_fen: function(fen) {\n      return validate_fen(fen);\n    },\n\n    fen: function() {\n      return generate_fen();\n    },\n\n    pgn: function(options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline = (typeof options === 'object' &&\n                     typeof options.newline_char === 'string') ?\n                     options.newline_char : '\\n';\n      var max_width = (typeof options === 'object' &&\n                       typeof options.max_width === 'number') ?\n                       options.max_width : 0;\n      var result = [];\n      var header_exists = false;\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \\\"' + header[i] + '\\\"]' + newline);\n        header_exists = true;\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline);\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = [];\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      var moves = [];\n      var move_string = '';\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...';\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string);\n          }\n          move_string = move_number + '.';\n        }\n\n        move_string = move_string + ' ' + move_to_san(move, false);\n        make_move(move);\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(move_string);\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result);\n      }\n\n      /* history should be back to what is was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ');\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0;\n      for (var i = 0; i < moves.length; i++) {\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop();\n          }\n\n          result.push(newline);\n          current_width = 0;\n        } else if (i !== 0) {\n          result.push(' ');\n          current_width++;\n        }\n        result.push(moves[i]);\n        current_width += moves[i].length;\n      }\n\n      return result.join('');\n    },\n\n    load_pgn: function(pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\n                    options.sloppy : false;\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\');\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true;\n        }\n        return false;\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char = (typeof options === 'object' &&\n                            typeof options.newline_char === 'string') ?\n                            options.newline_char : '\\r?\\n';\n        var header_obj = {};\n        var headers = header.split(new RegExp(mask(newline_char)));\n        var key = '';\n        var value = '';\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1');\n          if (trim(key).length > 0) {\n            header_obj[key] = value;\n          }\n        }\n\n        return header_obj;\n      }\n\n      var newline_char = (typeof options === 'object' &&\n                          typeof options.newline_char === 'string') ?\n                          options.newline_char : '\\r?\\n';\n      var regex = new RegExp('^(\\\\[(.|' + mask(newline_char) + ')*\\\\])' +\n                             '(' + mask(newline_char) + ')*' +\n                             '1.(' + mask(newline_char) + '|.)*$', 'g');\n\n      /* get header part of the PGN file */\n      var header_string = pgn.replace(regex, '$1');\n\n      /* no info part given, begins with moves */\n      if (header_string[0] !== '[') {\n        header_string = '';\n      }\n\n      reset();\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options);\n      for (var key in headers) {\n        set_header([key, headers[key]]);\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n      * [FEN position] */\n      if (headers['SetUp'] === '1') {\n          if (!(('FEN' in headers) && load(headers['FEN']))) {\n            return false;\n          }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn.replace(header_string, '').replace(new RegExp(mask(newline_char), 'g'), ' ');\n\n      /* delete comments */\n      ms = ms.replace(/(\\{[^}]+\\})+?/g, '');\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '');\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '');\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '');\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/));\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',');\n      var move = '';\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        move = move_from_san(moves[half_move], sloppy);\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1];\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === 'undefined') {\n          set_header(['Result', move]);\n        }\n      }\n      else {\n        move = move_from_san(move, sloppy);\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n      return true;\n    },\n\n    header: function() {\n      return set_header(arguments);\n    },\n\n    ascii: function() {\n      return ascii();\n    },\n\n    turn: function() {\n      return turn;\n    },\n\n    move: function(move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\n                    options.sloppy : false;\n\n      var move_obj = null;\n\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy);\n      } else if (typeof move === 'object') {\n        var moves = generate_moves();\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (move.from === algebraic(moves[i].from) &&\n              move.to === algebraic(moves[i].to) &&\n              (!('promotion' in moves[i]) ||\n              move.promotion === moves[i].promotion)) {\n            move_obj = moves[i];\n            break;\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null;\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj);\n\n      make_move(move_obj);\n\n      return pretty_move;\n    },\n\n    undo: function() {\n      var move = undo_move();\n      return (move) ? make_pretty(move) : null;\n    },\n\n    clear: function() {\n      return clear();\n    },\n\n    put: function(piece, square) {\n      return put(piece, square);\n    },\n\n    get: function(square) {\n      return get(square);\n    },\n\n    remove: function(square) {\n      return remove(square);\n    },\n\n    perft: function(depth) {\n      return perft(depth);\n    },\n\n    square_color: function(square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square];\n        return ((rank(sq_0x88) + file(sq_0x88)) % 2 === 0) ? 'light' : 'dark';\n      }\n\n      return null;\n    },\n\n    history: function(options) {\n      var reversed_history = [];\n      var move_history = [];\n      var verbose = (typeof options !== 'undefined' && 'verbose' in options &&\n                     options.verbose);\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n        if (verbose) {\n          move_history.push(make_pretty(move));\n        } else {\n          move_history.push(move_to_san(move));\n        }\n        make_move(move);\n      }\n\n      return move_history;\n    }\n\n  };\n};\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (typeof exports !== 'undefined') exports.Chess = Chess;\n/* export Chess object for any RequireJS compatible environment */\nif (typeof define !== 'undefined') define( function () { return Chess;  });\n","import { Chess, ChessInstance, Move } from \"chess.js\"\n\nclass Board {\n    board: ChessInstance = new Chess()\n    history: Move[] = []\n    header: any = {}\n    currentMove: number\n    redraw: (board: ChessInstance) => void\n\n    constructor(redraw?: (board: ChessInstance) => void) {\n        this.redraw = redraw || (() => {})\n        this.start()\n    }\n\n    load(pgn: string) {\n        this.board.load_pgn(pgn)\n        this.history = [...this.board.history({ verbose: true })]\n        this.header = this.board.header()\n        this.start()\n    }\n\n    undo() {\n        const move = this.board.undo()\n        if (move) {\n            this.currentMove--\n            this.redraw(this.board)\n            return move\n        }\n    }\n\n    redo() {\n        if (this.currentMove >= this.history.length) return\n        const move = this.history[this.currentMove]\n        this.currentMove++\n        this.board.move(move)\n        this.redraw(this.board)\n        return move\n    }\n\n    start() {\n        this.board.reset()\n        this.currentMove = 0\n        this.redraw(this.board)\n    }\n\n    end() {\n        while (this.currentMove < this.history.length) this.redo()\n    }\n\n    get comment(): string {\n        if (this.currentMove == 0) return \"Start of the game. White's turn.\"\n        return \"Turn №\" + this.currentMove + \": \" + this.incompleteComment\n    }\n\n    private get incompleteComment(): string {\n        if (this.currentMove >= this.history.length) {\n            return \"End of the game. Result: \" + this.header.Result + \".\"\n        }\n        if (this.board.in_checkmate()) {\n            return \"Checkmate!\"\n        } else if (this.board.in_check()) {\n            return \"Check...\"\n        } else if (this.board.in_draw()) {\n            return \"Draw.\"\n        } else if (this.board.in_stalemate()) {\n            return \"Stalemate.\"\n        } else if (this.board.in_threefold_repetition()) {\n            return \"Threefold repitition.\"\n        }\n        const move = this.history[this.currentMove - 1]\n        if (move) {\n            if (move.captured)\n                return (\n                    this.pieceName(move.captured) +\n                    \" captured by \" +\n                    (this.board.turn() == \"b\" ? \"white\" : \"black\") +\n                    \"!\"\n                )\n        }\n        return (this.board.turn() == \"w\" ? \"White\" : \"Black\") + \"'s turn.\"\n    }\n\n    pieceName(piece: \"p\" | \"r\" | \"n\" | \"b\" | \"q\" | \"k\"): string {\n        switch (piece) {\n            case \"p\":\n                return \"Pawn\"\n            case \"r\":\n                return \"Rook\"\n            case \"n\":\n                return \"Knight\"\n            case \"b\":\n                return \"Bishop\"\n            case \"q\":\n                return \"Queen\"\n            case \"k\":\n                return \"Knight\"\n        }\n    }\n}\n\nexport { Board }\n","import { Chess, ChessInstance, Square, Piece } from \"chess.js\"\n\nclass Renderer {\n    canvas: HTMLCanvasElement\n    ctx: CanvasRenderingContext2D\n    boardBlack = \"#9f5f22\"\n    boardWhite = \"#fe9f5f\"\n    black = \"#222222\"\n    white = \"#fefefe\"\n\n    constructor() {\n        this.canvas = document.getElementById(\"canvas\") as HTMLCanvasElement\n        this.ctx = this.canvas.getContext(\"2d\")\n    }\n\n    render(board: ChessInstance) {\n        const { width, height } = this.canvas\n        const ctx = this.ctx\n\n        ctx.clearRect(0, 0, width, height)\n        ctx.fillStyle = this.boardWhite\n        ctx.fillRect(0, 0, width, height)\n\n        const dx = width / 8\n        const dy = height / 8\n        for (let x = 0; x < 8; x++) {\n            for (let y = 0; y < 8; y++) {\n                if ((x + y) % 2) {\n                    ctx.fillStyle = this.boardBlack\n                    ctx.fillRect(x * dx, y * dy, dx, dy)\n                }\n                const square = (\"abcdefgh\"[x] + \"12345678\"[y]) as Square\n                const piece = board.get(square)\n                if (!piece) continue\n                this.drawPiece(x, y, dx, dy, piece)\n            }\n        }\n    }\n\n    drawPiece(x: number, y: number, dx: number, dy: number, piece: Piece) {\n        const ctx = this.ctx\n        const color = piece.color == \"w\" ? this.white : this.black\n\n        ctx.save()\n        ctx.translate(x * dx, y * dy)\n        ctx.scale(dx, dy)\n        ctx.fillStyle = color\n        switch (piece.type) {\n            case \"p\":\n                ctx.beginPath()\n                ctx.arc(0.5, 0.8, 0.3, Math.PI, Math.PI * 2)\n                ctx.fill()\n                ctx.beginPath()\n                ctx.arc(0.5, 0.4, 0.15, 0, Math.PI * 2)\n                ctx.fill()\n                break\n            case \"r\":\n                ctx.beginPath()\n                ctx.moveTo(0.2, 0.8)\n                ctx.lineTo(0.2, 0.7)\n\n                ctx.lineTo(0.3, 0.6)\n                ctx.lineTo(0.3, 0.35)\n\n                ctx.lineTo(0.25, 0.35)\n                ctx.lineTo(0.25, 0.15)\n\n                ctx.lineTo(0.35, 0.15)\n                ctx.lineTo(0.35, 0.2)\n                ctx.lineTo(0.45, 0.2)\n                ctx.lineTo(0.45, 0.15)\n                ctx.lineTo(0.55, 0.15)\n                ctx.lineTo(0.55, 0.2)\n                ctx.lineTo(0.65, 0.2)\n                ctx.lineTo(0.65, 0.15)\n\n                ctx.lineTo(0.75, 0.15)\n                ctx.lineTo(0.75, 0.35)\n\n                ctx.lineTo(0.7, 0.35)\n                ctx.lineTo(0.7, 0.6)\n\n                ctx.lineTo(0.8, 0.7)\n                ctx.lineTo(0.8, 0.8)\n                ctx.fill()\n                break\n            case \"n\":\n                ctx.beginPath()\n                ctx.moveTo(0.2, 0.8)\n                ctx.bezierCurveTo(0.35, 0.55, 0.45, 0.7, 0.55, 0.4)\n                ctx.lineTo(0.3, 0.5)\n                ctx.quadraticCurveTo(0.25, 0.4, 0.3, 0.33)\n                ctx.quadraticCurveTo(0.6, 0.05, 0.65, 0.15)\n                ctx.bezierCurveTo(0.9, 0.3, 0.7, 0.45, 0.8, 0.8)\n                ctx.fill()\n                break\n            case \"b\":\n                ctx.beginPath()\n                ctx.arc(0.5, 0.8, 0.3, Math.PI, Math.PI * 2)\n                ctx.fill()\n                ctx.beginPath()\n                ctx.arc(0.5, 0.4, 0.15, 0, Math.PI * 2)\n                ctx.fill()\n                ctx.beginPath()\n                ctx.arc(0.5, 0.2, 0.1, 0, Math.PI * 2)\n                ctx.fill()\n                break\n            case \"q\":\n                ctx.beginPath()\n                ctx.lineTo(0.2, 0.8)\n                ctx.lineTo(0.3, 0.6)\n                ctx.lineTo(0.2, 0.5)\n                const spikes = 4\n                const spikeMin = 0.1\n                const spikeMax = 0.9\n                const crownMin = 0.2\n                const crownMax = 0.8\n                for (let i = 0; i <= spikes; i++) {\n                    ctx.lineTo(\n                        spikeMin + ((spikeMax - spikeMin) / spikes) * (i - 0.5),\n                        0.15\n                    )\n                    ctx.lineTo(\n                        crownMin + ((crownMax - crownMin) / spikes) * i,\n                        i == 0 || i == spikes ? 0.5 : 0.4\n                    )\n                }\n                ctx.lineTo(0.8, 0.5)\n                ctx.lineTo(0.7, 0.6)\n                ctx.lineTo(0.8, 0.8)\n                ctx.fill()\n                for (let i = 1; i <= spikes; i++) {\n                    ctx.beginPath()\n                    ctx.arc(\n                        spikeMin + ((spikeMax - spikeMin) / spikes) * (i - 0.5),\n                        0.15,\n                        0.05,\n                        0,\n                        Math.PI * 2\n                    )\n                    ctx.fill()\n                }\n                break\n            case \"k\":\n                ctx.beginPath()\n                ctx.moveTo(0.25, 0.75)\n                ctx.lineTo(0.25, 0.5)\n                ctx.lineTo(0.75, 0.5)\n                ctx.lineTo(0.75, 0.75)\n                ctx.fill()\n                ctx.beginPath()\n                ctx.ellipse(0.5, 0.75, 0.25, 0.1, 0, 0, Math.PI * 2)\n                ctx.fill()\n\n                ctx.beginPath()\n                ctx.ellipse(0.3, 0.5, 0.2, 0.2, 0.3, 0, Math.PI * 2)\n                ctx.ellipse(0.7, 0.5, 0.2, 0.2, -0.3, 0, Math.PI * 2)\n                ctx.fill()\n                ctx.beginPath()\n                ctx.ellipse(0.5, 0.3, 0.12, 0.15, 0, 0, Math.PI * 2)\n                ctx.fill()\n                break\n        }\n        ctx.restore()\n    }\n}\n\nexport { Renderer }\n","import { TextManager, FileManager, ButtonManager, CommentManager } from \"./ui\"\nimport { Board } from \"./board\"\nimport { Renderer } from \"./renderer\"\n\nfunction main() {\n    const renderer = new Renderer()\n    const commentManager = new CommentManager()\n    let board = new Board()\n    board = new Board(b => {\n        renderer.render(b)\n        commentManager.text = board.comment\n    })\n    const textManager = new TextManager()\n    board.load(textManager.text)\n    new FileManager(text => (textManager.text = text))\n    new ButtonManager(\n        () => board.start(),\n        () => board.undo(),\n        () => board.redo(),\n        () => board.end()\n    )\n    document.getElementById(\"clear-button\").onclick = () => textManager.clear()\n    document.getElementById(\"parse-button\").onclick = () => {\n        board.load(textManager.text)\n    }\n}\n\ndocument.body.onload = main\n"]}